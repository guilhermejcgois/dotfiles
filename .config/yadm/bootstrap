#!/usr/bin/env bash
set -euo pipefail

install_node_manager() {
  echo "[bootstrap] instalando gerenciador de Node (Volta, fallback FNM)…"

  # Tenta Volta (retry para contornar 429)
  if ! command -v volta >/dev/null 2>&1; then
    curl -fsSL --retry 5 --retry-all-errors --retry-delay 2 https://get.volta.sh | bash || true
  fi

  export VOLTA_HOME="$HOME/.volta"
  export PATH="$VOLTA_HOME/bin:$PATH"

  # Fallback: FNM se Volta ainda não está disponível
  if ! command -v volta >/dev/null 2>&1 && ! command -v fnm >/dev/null 2>&1; then
    curl -fsSL https://fnm.vercel.app/install | bash || true
    export FNM_DIR="$HOME/.fnm"
    export PATH="$FNM_DIR:$PATH"
    # inicializa fnm em shell não interativo
    eval "$(fnm env --use-on-cd)" || true
  fi

  # Provisiona Node LTS
  if command -v volta >/dev/null 2>&1; then
    "$VOLTA_HOME/bin/volta" install node@lts
    echo "[bootstrap] Volta pronto com Node LTS."
  elif command -v fnm >/dev/null 2>&1; then
    fnm install --lts
    fnm default "$(fnm ls-remote --lts | tail -1 | awk '{print $1}')" || true
    command -v corepack >/dev/null 2>&1 && corepack enable || true
    echo "[bootstrap] FNM pronto com Node LTS."
  else
    echo "[bootstrap][warn] Não consegui instalar Volta nem FNM."
  fi
}

# --- Detecta OS ---
detect_os() {
  if [[ "$OSTYPE" == "darwin"* ]]; then echo "macos"
  elif grep -qi microsoft /proc/version 2>/dev/null; then echo "wsl"
  elif command -v dnf >/dev/null 2>&1; then echo "fedora"
  elif command -v pacman >/dev/null 2>&1; then echo "arch"
  elif command -v apt-get >/dev/null 2>&1; then echo "debian"
  else echo "unknown"; fi
}

OS=$(detect_os)
echo "[bootstrap] OS detectado: $OS"

# --- Pacotes básicos ---
install_basics() {
  case "$OS" in
    macos)
      if ! command -v brew >/dev/null; then
        echo "[bootstrap] Instalando Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
      brew bundle --file="$HOME/packages/brew.Brewfile" || true
      ;;
    debian)
      sudo apt-get update -y
      xargs -r sudo apt-get install -y < "$HOME/packages/apt.txt"
      install_node_manager
      ;;
    arch)
      sudo pacman -Sy --needed --noconfirm $(tr '\n' ' ' < "$HOME/packages/pacman.txt")
      install_node_manager
      ;;
    fedora)
      sudo dnf install -y $(tr '\n' ' ' < "$HOME/packages/dnf.txt")
      install_node_manager
      ;;
    wsl)
      # assume Debian-like no WSL
      sudo apt-get update -y
      xargs -r sudo apt-get install -y < "$HOME/packages/apt.txt"
      install_node_manager
      ;;
    *)
      echo "[bootstrap] OS desconhecido; instale zsh/git/curl manualmente."
      ;;
  esac
}

install_basics

# --- Zsh como shell padrão ---
if command -v zsh >/dev/null 2>&1; then
  if [[ "$SHELL" != *zsh ]]; then
    echo "[bootstrap] Trocando shell padrão para zsh..."
    chsh -s "$(command -v zsh)" || true
  fi
fi

# --- Antidote + plugins (o .zshrc já cuida, mas garantimos cache inicial) ---
if [[ ! -d "${ZDOTDIR:-$HOME}/.antidote" ]]; then
  git clone --depth=1 https://github.com/mattmc3/antidote.git "${ZDOTDIR:-$HOME}/.antidote"
fi
zsh -ic 'antidote bundle < ~/.zsh_plugins.txt > ~/.zsh_plugins.zsh' || true

# --- eza (ls moderno) ---
install_eza() {
  case "$OS" in
    macos)
      if ! command -v eza >/dev/null 2>&1; then
        brew install eza || true
      fi
      ;;
    debian|wsl)
      if ! command -v eza >/dev/null 2>&1; then
        # tenta pelo apt (algumas distros já têm)
        sudo apt-get update -y
        sudo apt-get install -y eza || {
          # fallback: pacote .deb oficial
          tmpdeb="$(mktemp /tmp/eza_XXXX.deb)"
          curl -fsSL https://github.com/eza-community/eza/releases/latest/download/eza_amd64.deb -o "$tmpdeb"
          sudo apt-get install -y "$tmpdeb"
          rm -f "$tmpdeb"
        }
      fi
      ;;
    fedora)
      command -v eza >/dev/null 2>&1 || sudo dnf install -y eza
      ;;
    arch)
      command -v eza >/dev/null 2>&1 || sudo pacman -Sy --needed --noconfirm eza
      ;;
  esac

  # Fallback para lsd se eza não estiver disponível
  if ! command -v eza >/dev/null 2>&1 && ! command -v lsd >/dev/null 2>&1; then
    case "$OS" in
      macos) brew install lsd || true ;;
      debian|wsl) sudo apt-get install -y lsd || true ;;
      fedora) sudo dnf install -y lsd || true ;;
      arch) sudo pacman -Sy --needed --noconfirm lsd || true ;;
    esac
  fi
}
install_eza 

# --- Powerlevel10k: recomenda fontes MesloLGS NF ---
echo "[bootstrap] Dica: instale a fonte Nerd (MesloLGS NF) e selecione no terminal."

echo "[bootstrap] Concluído. Abra um novo terminal (ou rode: exec zsh)."

